apply plugin: 'com.github.node-gradle.node'
node {
    version = '10.16.0'
    npmVersion = '6.10.2'
    download = true
}

task generateLDSJar(type: Exec) {
    workingDir rootProject.getProjectDir()
    // Run maven to build language server with diagram support (LDS)
    // This requires mvn on PATH
    if (System.properties['os.name'].toLowerCase().contains('windows')) {
        commandLine 'cmd', '/c', 'mvn', 'clean', 'package', '-P', 'lds'
    } else {
        commandLine 'mvn', 'clean', 'package', '-P', 'lds'
    }
}

task copySWTJars(type: Copy, dependsOn: generateLDSJar) {
    from '../org.lflang.lds/target/repository/plugins'
    include 'org.eclipse.swt.*.jar'
    rename '(.+).x86(.+)', '$1.jar' // remove version numbers
    into './ls'
}
task copyLDSJar(type: Copy, dependsOn: generateLDSJar) {
    from '../org.lflang.lds/target/exe/lflang-lds.jar'
    into './ls'
}

clean {
    doLast {
        delete copySWTJars.outputs
        delete copyLDSJar.outputs
        delete 'out' // output of npmInstall - don't want to delete node_modules
    }
}

npmInstall {
    inputs.files('package.json', 'package-lock.json')
    outputs.dir('node_modules')
}

task compileVSCodeExtension(type: NpxTask, dependsOn: npmInstall) {
    command = 'tsc'
    inputs.files('package.json', 'package-lock.json', 'tsconfig.json')
    inputs.dir('src')
    inputs.dir(fileTree('node_modules').exclude('.cache'))
    outputs.dir('out')
}

task generateVSCodeExtension(type: NpxTask, dependsOn: [compileVSCodeExtension, copyLDSJar, copySWTJars]) {
    ext.destDir = new File(buildDir, 'vscode')
    ext.archiveName = "lflang-extension-${project.version}.vsix"
    ext.destPath = "$destDir/$archiveName"
    
    inputs.files('package.json', 'lflang.configuration.json', '.vscodeignore')
    inputs.dir('out')
    inputs.dir('images')
    inputs.dir('ls')
    inputs.dir('syntaxes')
    outputs.dir destDir
    doFirst {
        destDir.mkdirs()
    }

    command = 'vsce'
    args = ['package', '--out', destPath ]
}

task installExtension(type: Exec, dependsOn: generateVSCodeExtension) {
    if (System.properties['os.name'].toLowerCase().contains('windows')) {
        commandLine 'code.cmd'
    } else {
        commandLine 'code'
    }
    args '--install-extension', generateVSCodeExtension.destPath
}

task startCode(type:Exec, dependsOn: installExtension) {
    if (System.properties['os.name'].toLowerCase().contains('windows')) {
        commandLine 'code.cmd'
    } else {
        commandLine 'code'
    }
    args "$rootProject.projectDir/example/", '--new-window'
}
